/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.main;

import crypto.cipher.SymmetricCipherAlgorithm;
import crypto.hash.HashAlgorithm;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.InvalidNameException;
import javax.naming.ldap.LdapName;
import javax.naming.ldap.Rdn;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import main.Kripto;

/**
 *
 * @author pajser
 */
public class MainForm extends javax.swing.JFrame {

    static String sourceFileName = "";
    static boolean sourceIsJava = false;
    static File sourceFile = null;
    static String cipher = "";
    static String hash = "";
    static int saltLength = 0;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        try {
            List<Rdn> r = new LdapName(Kripto.userCertificate.getSubjectDN().getName()).getRdns();
            UsernameLabel.setText("Username: " + Kripto.user.getUsername());
            UFLabel.setText("User folder: " + Kripto.user.getFolderPath());
            PKLLabel.setText("Private key location: " + Kripto.user.getPrivateKeyPath());
            CLLabel.setText("Certificate location: " + Kripto.user.getCertificatePath());
            CLabel.setText("Country: " + r.get(0).getValue().toString());
            SLabel.setText("State: " + r.get(1).getValue().toString());
            LLabel.setText("Location: " + r.get(2).getValue().toString());
            OLabel.setText("Organization: " + r.get(3).getValue().toString());
            OULabel.setText("Organizational unit: " + r.get(4).getValue().toString());
            CNLabel.setText("Common name: " + r.get(5).getValue().toString());
            EmailLabel.setText("Email: " + r.get(6).getValue().toString());
            EDLabel.setText("Expiration date: " + new SimpleDateFormat("dd-MM-yyyy").format(Kripto.userCertificate.getNotAfter().getTime()));

            String keyUsage = "";
            if (Kripto.userCertificate.getKeyUsage()[0]) {
                keyUsage += "Digital Signature;";
            }
            if (Kripto.userCertificate.getKeyUsage()[1]) {
                keyUsage += "Non Repuditation;";
            }
            if (Kripto.userCertificate.getKeyUsage()[2]) {
                keyUsage += "Key Encipherment;";
            }
            if (Kripto.userCertificate.getKeyUsage()[3]) {
                keyUsage += "Data Encipherment;";
            }
            if (Kripto.userCertificate.getKeyUsage()[4]) {
                keyUsage += "Key Agreement;";
            }
            if (Kripto.userCertificate.getKeyUsage()[5]) {
                keyUsage += "Certificate Sign;";
            }
            if (Kripto.userCertificate.getKeyUsage()[6]) {
                keyUsage += "CRL Sign;";
            }
            if (Kripto.userCertificate.getKeyUsage()[7]) {
                keyUsage += "Encipher Only;";
            }
            if (Kripto.userCertificate.getKeyUsage()[8]) {
                keyUsage += "Decipher Only;";
            }
            KULabel.setText(keyUsage);

        } catch (InvalidNameException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        TabbedPane = new javax.swing.JTabbedPane();
        profilePanel = new javax.swing.JPanel();
        ProfileLabel = new javax.swing.JLabel();
        CertificateInfoLabel = new javax.swing.JLabel();
        CLabel = new javax.swing.JLabel();
        SLabel = new javax.swing.JLabel();
        LLabel = new javax.swing.JLabel();
        OLabel = new javax.swing.JLabel();
        OULabel = new javax.swing.JLabel();
        CNLabel = new javax.swing.JLabel();
        EmailLabel = new javax.swing.JLabel();
        UFLabel = new javax.swing.JLabel();
        UsernameLabel = new javax.swing.JLabel();
        CLLabel = new javax.swing.JLabel();
        PKLLabel = new javax.swing.JLabel();
        EDLabel = new javax.swing.JLabel();
        KeyUsagesLable = new javax.swing.JLabel();
        KULabel = new javax.swing.JLabel();
        sendMessagePanel = new javax.swing.JPanel();
        pathField = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();
        cipherLabel = new javax.swing.JLabel();
        cipherBox = new javax.swing.JComboBox<>();
        hashLabel = new javax.swing.JLabel();
        hashBox = new javax.swing.JComboBox<>();
        receiverLabel = new javax.swing.JLabel();
        receiverBox = new javax.swing.JComboBox<>();
        sendButton = new javax.swing.JButton();
        saltLabel = new javax.swing.JLabel();
        saltLengthBox = new javax.swing.JComboBox<>();
        codePane = new javax.swing.JScrollPane();
        codeTextArea = new javax.swing.JTextArea();
        receveMessagePanel = new javax.swing.JPanel();
        encryptedFileButton = new javax.swing.JButton();
        encryptedFileField = new javax.swing.JTextField();
        sourcePane = new javax.swing.JScrollPane();
        sourceTextArea = new javax.swing.JTextArea();
        senderLabel = new javax.swing.JLabel();
        verificationLabel = new javax.swing.JLabel();
        compileAndRunButton = new javax.swing.JButton();
        sourceCipherLabel = new javax.swing.JLabel();
        sourceHashLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kripto");
        setMinimumSize(new java.awt.Dimension(300, 200));
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        profilePanel.setBackground(new java.awt.Color(255, 255, 255));
        profilePanel.setLayout(new java.awt.GridBagLayout());

        ProfileLabel.setText("USER INFO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        profilePanel.add(ProfileLabel, gridBagConstraints);

        CertificateInfoLabel.setText("CERTIFICATE INFO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 10, 0);
        profilePanel.add(CertificateInfoLabel, gridBagConstraints);

        CLabel.setText("Country:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(CLabel, gridBagConstraints);

        SLabel.setText("State:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(SLabel, gridBagConstraints);

        LLabel.setText("Location:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(LLabel, gridBagConstraints);

        OLabel.setText("Organization:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(OLabel, gridBagConstraints);

        OULabel.setText("Organizational unit:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(OULabel, gridBagConstraints);

        CNLabel.setText("Common name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(CNLabel, gridBagConstraints);

        EmailLabel.setText("Email:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(EmailLabel, gridBagConstraints);

        UFLabel.setText("User folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(UFLabel, gridBagConstraints);

        UsernameLabel.setText("Username:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(UsernameLabel, gridBagConstraints);

        CLLabel.setText("Cert location:");
        CLLabel.setAutoscrolls(true);
        CLLabel.setMaximumSize(new java.awt.Dimension(40, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(CLLabel, gridBagConstraints);

        PKLLabel.setText("PK location:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(PKLLabel, gridBagConstraints);

        EDLabel.setText("Expire date:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(EDLabel, gridBagConstraints);

        KeyUsagesLable.setText("KEY USAGES");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 10, 0);
        profilePanel.add(KeyUsagesLable, gridBagConstraints);

        KULabel.setText("Key usage:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        profilePanel.add(KULabel, gridBagConstraints);

        TabbedPane.addTab("Profile", profilePanel);

        sendMessagePanel.setBackground(new java.awt.Color(255, 255, 255));
        sendMessagePanel.setLayout(new java.awt.GridBagLayout());

        pathField.setEditable(false);
        pathField.setText("/path");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        sendMessagePanel.add(pathField, gridBagConstraints);

        fileButton.setText("Choose file");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        sendMessagePanel.add(fileButton, gridBagConstraints);

        cipherLabel.setText("Cipher Algorithm");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        sendMessagePanel.add(cipherLabel, gridBagConstraints);

        cipherBox.setModel(new javax.swing.DefaultComboBoxModel<>(SymmetricCipherAlgorithm.getCiphers()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        sendMessagePanel.add(cipherBox, gridBagConstraints);

        hashLabel.setText("Hash Algorithm");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        sendMessagePanel.add(hashLabel, gridBagConstraints);

        hashBox.setModel(new javax.swing.DefaultComboBoxModel<>(HashAlgorithm.getHashes()));
        hashBox.setSelectedItem("test");
        hashBox.setName(""); // NOI18N
        hashBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        sendMessagePanel.add(hashBox, gridBagConstraints);

        receiverLabel.setText("Receiver");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        sendMessagePanel.add(receiverLabel, gridBagConstraints);

        receiverBox.setModel(new javax.swing.DefaultComboBoxModel<>(Kripto.passwd.getUsernames()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        sendMessagePanel.add(receiverBox, gridBagConstraints);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        sendMessagePanel.add(sendButton, gridBagConstraints);

        saltLabel.setText("Salt length");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        sendMessagePanel.add(saltLabel, gridBagConstraints);

        saltLengthBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "32", "64", "128", "256", "512", "1024" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        sendMessagePanel.add(saltLengthBox, gridBagConstraints);

        codeTextArea.setEditable(false);
        codeTextArea.setBackground(new java.awt.Color(0, 0, 0));
        codeTextArea.setColumns(20);
        codeTextArea.setForeground(new java.awt.Color(255, 255, 255));
        codeTextArea.setRows(5);
        codeTextArea.setText("TEST TESTTEST TESTTEST TEST\nTEST TESTTEST TEST\nTEST TESTTEST TEST\n\n\nTEST TESTTEST TEST\nTEST TESTTEST TEST\nTEST TESTTEST TEST\nTEST TESTTEST TEST\n\n\n\nTEST TESTTEST TESTTEST T\n\n\n\n\nTEST TESTTEST TESTTEST T");
        codePane.setViewportView(codeTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = -238;
        gridBagConstraints.ipady = -78;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        sendMessagePanel.add(codePane, gridBagConstraints);

        TabbedPane.addTab("Send", sendMessagePanel);

        receveMessagePanel.setBackground(new java.awt.Color(255, 255, 255));
        receveMessagePanel.setLayout(new java.awt.GridBagLayout());

        encryptedFileButton.setText("Choose file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        receveMessagePanel.add(encryptedFileButton, gridBagConstraints);

        encryptedFileField.setEditable(false);
        encryptedFileField.setText("/path");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        receveMessagePanel.add(encryptedFileField, gridBagConstraints);

        sourceTextArea.setEditable(false);
        sourceTextArea.setBackground(new java.awt.Color(0, 0, 0));
        sourceTextArea.setColumns(20);
        sourceTextArea.setForeground(new java.awt.Color(255, 255, 255));
        sourceTextArea.setRows(5);
        sourceTextArea.setText("Code preview");
        sourcePane.setViewportView(sourceTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = -238;
        gridBagConstraints.ipady = -78;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 44, 0, 0);
        receveMessagePanel.add(sourcePane, gridBagConstraints);

        senderLabel.setText("Sender:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        receveMessagePanel.add(senderLabel, gridBagConstraints);

        verificationLabel.setText("Verification");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        receveMessagePanel.add(verificationLabel, gridBagConstraints);

        compileAndRunButton.setText("Compile and run");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        receveMessagePanel.add(compileAndRunButton, gridBagConstraints);

        sourceCipherLabel.setText("Cipher:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        receveMessagePanel.add(sourceCipherLabel, gridBagConstraints);

        sourceHashLabel.setText("Hash:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        receveMessagePanel.add(sourceHashLabel, gridBagConstraints);

        TabbedPane.addTab("Receive", receveMessagePanel);

        getContentPane().add(TabbedPane);
        TabbedPane.getAccessibleContext().setAccessibleName("Send");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hashBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashBoxActionPerformed
        // TODO add your handling code here:
//        hash=hashBox.getItemAt(hashBox.getSelectedIndex());
//        System.out.println(hash);
    }//GEN-LAST:event_hashBoxActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Java source code files", "java");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            pathField.setText(chooser.getSelectedFile().getPath());
            try {
                sourceFileName = chooser.getSelectedFile().getName();
                sourceIsJava = sourceFileName.endsWith(".java");
                sourceFile = chooser.getSelectedFile();
                codeTextArea.setText(new String(Files.readAllBytes(chooser.getSelectedFile().toPath())));
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_fileButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        cipher = cipherBox.getItemAt(cipherBox.getSelectedIndex());
        hash = hashBox.getItemAt(hashBox.getSelectedIndex());
        saltLength = Integer.parseInt(saltLengthBox.getItemAt(saltLengthBox.getSelectedIndex()));

        if (!sourceIsJava || sourceFile.exists()) {
            JOptionPane.showMessageDialog(this,
                    "Chosen file is not a java source file!");
        }

        String msg = sourceFileName + " " + sourceIsJava + " " + cipher + " " + saltLength + " " + hash;
        System.out.println(msg);

    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CLLabel;
    private javax.swing.JLabel CLabel;
    private javax.swing.JLabel CNLabel;
    private javax.swing.JLabel CertificateInfoLabel;
    private javax.swing.JLabel EDLabel;
    private javax.swing.JLabel EmailLabel;
    private javax.swing.JLabel KULabel;
    private javax.swing.JLabel KeyUsagesLable;
    private javax.swing.JLabel LLabel;
    private javax.swing.JLabel OLabel;
    private javax.swing.JLabel OULabel;
    private javax.swing.JLabel PKLLabel;
    private javax.swing.JLabel ProfileLabel;
    private javax.swing.JLabel SLabel;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JLabel UFLabel;
    private javax.swing.JLabel UsernameLabel;
    private javax.swing.JComboBox<String> cipherBox;
    private javax.swing.JLabel cipherLabel;
    private javax.swing.JScrollPane codePane;
    private javax.swing.JTextArea codeTextArea;
    private javax.swing.JButton compileAndRunButton;
    private javax.swing.JButton encryptedFileButton;
    private javax.swing.JTextField encryptedFileField;
    private javax.swing.JButton fileButton;
    private javax.swing.JComboBox<String> hashBox;
    private javax.swing.JLabel hashLabel;
    private javax.swing.JTextField pathField;
    private javax.swing.JPanel profilePanel;
    private javax.swing.JComboBox<String> receiverBox;
    private javax.swing.JLabel receiverLabel;
    private javax.swing.JPanel receveMessagePanel;
    private javax.swing.JLabel saltLabel;
    private javax.swing.JComboBox<String> saltLengthBox;
    private javax.swing.JButton sendButton;
    private javax.swing.JPanel sendMessagePanel;
    private javax.swing.JLabel senderLabel;
    private javax.swing.JLabel sourceCipherLabel;
    private javax.swing.JLabel sourceHashLabel;
    private javax.swing.JScrollPane sourcePane;
    private javax.swing.JTextArea sourceTextArea;
    private javax.swing.JLabel verificationLabel;
    // End of variables declaration//GEN-END:variables
}
